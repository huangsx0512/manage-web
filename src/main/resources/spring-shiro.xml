<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
       http://www.springframework.org/schema/util 
       http://www.springframework.org/schema/util/spring-util-4.0.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<description>== Shiro Components ==</description>
	<!-- 会话Session ID生成器 -->
	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

	<!-- 会话Cookie模板 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!--cookie的name，我故意取名叫xxxxbaidu -->
	    <constructor-arg value="v_v-c-fabirc"/>
	    <property name="httpOnly" value="true"/>
	    <!--cookie的有效时间 -->
	    <property name="maxAge" value="-1"/>
	    <!-- 配置存储Session Cookie的domain为 一级域名
	    <property name="domain" value=".zimmur.com"/>
	     -->
	</bean>
	<!-- 用户信息记住我功能的相关配置 -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
	    <constructor-arg value="v_v-c-fabirc"/>
	    <property name="httpOnly" value="true"/>
	    <!-- 配置存储rememberMe Cookie的domain为 一级域名
	    <property name="domain" value=".zimmur.com"/>
	     -->
	    <property name="maxAge" value="2592000"/><!-- 30天时间，记住我30天 -->
	</bean>

    <!-- rememberMe管理器 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
        <property name="cipherKey"
                  value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>
    
     <!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->  
    <bean id="myRealm" class="com.zimmur.platform.manage.web.shiro.realm.MyRealm"/>  
    <!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->  
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
        <property name="realm" ref="myRealm"/> 
        <property name="rememberMeManager" ref="rememberMeManager"/> 
    </bean> 
    <!-- session 校验单个用户是否多次登录 -->
	<bean id="kickoutSessionFilter"   class="com.zimmur.platform.manage.web.shiro.filter.KickoutSessionFilter">  
	    <property name="kickoutUrl" value="/user/login.shtml?kickout"/>  
	</bean>  
    <!-- 认证数据库存储-->
    <bean id="shiroManager" class="com.zimmur.platform.manage.web.shiro.service.ShiroManagerImpl"/>
    <bean id="login" class="com.zimmur.platform.manage.web.shiro.filter.LoginFilter"/>
    <bean id="role" class="com.zimmur.platform.manage.web.shiro.filter.RoleFilter"/>
    <bean id="permission" class="com.zimmur.platform.manage.web.shiro.filter.PermissionFilter"/>
     <bean id="simple" class="com.zimmur.platform.manage.web.shiro.filter.SimpleAuthFilter"/>
     
    <!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->  
    <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->  
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
        <!-- Shiro的核心安全接口,这个属性是必须的 -->  
        <property name="securityManager" ref="securityManager"/>  
        <!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->  
        <property name="loginUrl" value="/open/login.shtml"/>  
        <!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了) -->  
        <!-- <property name="successUrl" value="/system/main"/> -->  
        <!-- 用户访问未对其授权的资源时,所显示的连接 -->  
        <!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->  
        <property name="unauthorizedUrl" value="/"/>  
        <!-- Shiro连接约束配置,即过滤链的定义 -->  
        <!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->  
        <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->  
        <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->  
        <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->  
        <property name="filterChainDefinitions" value="#{shiroManager.loadFilterChainDefinitions()}"/>  
        <property name="filters">
           <util:map>
              <entry key="login" value-ref="login"></entry>
              <entry key="role" value-ref="role"></entry>
              <entry key="simple" value-ref="simple"></entry>
              <entry key="permission" value-ref="permission"></entry>
              <entry key="kickout" value-ref="kickoutSessionFilter"></entry>
           </util:map>
       </property>
    </bean>  
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->  
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>  
	<!-- ============================================================================ -->

</beans>

