<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zimmur.platform.manage.web.dao.AppMapper" >
  <resultMap id="BaseResultMap" type="com.zimmur.platform.manage.web.domain.model.App" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="code" property="code" jdbcType="VARCHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="app_key" property="appKey" jdbcType="VARCHAR" />
    <result column="is_ip" property="isIp" jdbcType="TINYINT" />
    <result column="ips" property="ips" jdbcType="VARCHAR" />
    <result column="is_enabled" property="isEnabled" jdbcType="TINYINT" />
  </resultMap>
  <resultMap id="AppInfoResultMap" type="com.zimmur.platform.manage.web.domain.vo.AppVo" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="code" property="code" jdbcType="VARCHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="app_key" property="appKey" jdbcType="VARCHAR" />
    <result column="is_ip" property="isIp" jdbcType="TINYINT" />
    <result column="ips" property="ips" jdbcType="VARCHAR" />
    <result column="is_enabled" property="isEnabled" jdbcType="TINYINT" />
    <result column="role" property="role" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, code, name, app_key, is_ip, ips, is_enabled
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.zimmur.platform.manage.web.domain.model.AppExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from app
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from app
    where id = #{id,jdbcType=INTEGER}
  </select>
  
  <!-- 多参数分页查询应用信息(包含该应用的角色) -->
  <select id="queryAppInfo" resultMap="AppInfoResultMap">
   select a.id,a.code,a.name,a.app_key,a.ips,a.is_enabled,group_concat(d.name) role
   from  app a LEFT JOIN (select b.*,c.name from app_role b LEFT JOIN role c on b.role_id = c.id)d ON a.id = d.app_id 
   where 1=1 
   <if test='keyword !=null and keyword !="" '>
   		and (a.name LIKE CONCAT('%',#{keyword},'%') or a.code = #{keyword})
   </if>
   group by a.id order by a.id DESC
   limit #{pageBeginNo},#{pageSize}  
  </select>
  
  <!-- 多参数分页查询总数 -->
  <select id="countByParam" resultType="java.lang.Integer">
   select count(t.id) from 
   (select a.id,a.code,a.name,a.app_key,a.ips,a.is_enabled,group_concat(d.name) role
   from  app a LEFT JOIN (select b.*,c.name from app_role b LEFT JOIN role c on b.role_id = c.id)d ON a.id = d.app_id 
   where 1=1 
   <if test='keyword !=null and keyword !="" '>
   		and (a.name LIKE CONCAT('%',#{keyword},'%') or a.code = #{keyword})
   </if>
   group by a.id order by a.id DESC)t  
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from app
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.zimmur.platform.manage.web.domain.model.AppExample" >
    delete from app
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zimmur.platform.manage.web.domain.model.App" >
    insert into app (id, code, name, 
      app_key, is_ip, ips, 
      is_enabled)
    values (#{id,jdbcType=INTEGER}, #{code,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{appKey,jdbcType=VARCHAR}, #{isIp,jdbcType=TINYINT}, #{ips,jdbcType=VARCHAR}, 
      #{isEnabled,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="com.zimmur.platform.manage.web.domain.model.App" useGeneratedKeys="true" keyProperty="id">
    insert into app
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="code != null" >
        code,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="appKey != null" >
        app_key,
      </if>
      <if test="isIp != null" >
        is_ip,
      </if>
      <if test="ips != null" >
        ips,
      </if>
      <if test="isEnabled != null" >
        is_enabled,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="code != null" >
        #{code,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="appKey != null" >
        #{appKey,jdbcType=VARCHAR},
      </if>
      <if test="isIp != null" >
        #{isIp,jdbcType=TINYINT},
      </if>
      <if test="ips != null" >
        #{ips,jdbcType=VARCHAR},
      </if>
      <if test="isEnabled != null" >
        #{isEnabled,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zimmur.platform.manage.web.domain.model.AppExample" resultType="java.lang.Integer" >
    select count(*) from app
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update app
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.code != null" >
        code = #{record.code,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.appKey != null" >
        app_key = #{record.appKey,jdbcType=VARCHAR},
      </if>
      <if test="record.isIp != null" >
        is_ip = #{record.isIp,jdbcType=TINYINT},
      </if>
      <if test="record.ips != null" >
        ips = #{record.ips,jdbcType=VARCHAR},
      </if>
      <if test="record.isEnabled != null" >
        is_enabled = #{record.isEnabled,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update app
    set id = #{record.id,jdbcType=INTEGER},
      code = #{record.code,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      app_key = #{record.appKey,jdbcType=VARCHAR},
      is_ip = #{record.isIp,jdbcType=TINYINT},
      ips = #{record.ips,jdbcType=VARCHAR},
      is_enabled = #{record.isEnabled,jdbcType=TINYINT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zimmur.platform.manage.web.domain.model.App" >
    update app
    <set >
      <if test="code != null" >
        code = #{code,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="appKey != null" >
        app_key = #{appKey,jdbcType=VARCHAR},
      </if>
      <if test="isIp != null" >
        is_ip = #{isIp,jdbcType=TINYINT},
      </if>
      <if test="ips != null" >
        ips = #{ips,jdbcType=VARCHAR},
      </if>
      <if test="isEnabled != null" >
        is_enabled = #{isEnabled,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zimmur.platform.manage.web.domain.model.App" >
    update app
    set code = #{code,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      app_key = #{appKey,jdbcType=VARCHAR},
      is_ip = #{isIp,jdbcType=TINYINT},
      ips = #{ips,jdbcType=VARCHAR},
      is_enabled = #{isEnabled,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>